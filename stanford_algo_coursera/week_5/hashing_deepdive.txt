Hash Table is like a subset of values of the universe of possible values,
We would like this to be small this way we could hold it in the main memory.

Goal:- Maintain an evolving set S which belong to the U (universe)

Why not use arrays, they have O(1) lookup too right?, yes, but they maintain the entire universe O(u) space, what if we cannot have all that space avaialble(main memory restrictions), we would like something in the order of O(s)

Why not use lists, they can use space in the order of O(s), however issue is lookup is O(s), sine random access is not v good in lists.

Best of both worlds?(arrays and lists)
------------------------------------
1. Pick n = # of buckets
where n roughly equal to |s|

2. Choose a hash function 
   func hash_function(Key) => spits out (elements from index 0..n-1)

3. Use Array of leangth N, store X in array at A[hash_function[X]]   

4. How do we handle collisons?

Example of collisons :-

Birthday paradox
Consider N people with random birthdays which are equally likely on any day of the year. How large does n need to be before there is atleast 50% probability of two people have same birthdays.



P(shared_birthdays) + P (distinct_birthdays) = 100%
P(shared_birthdays) = 100% - P (distinct_birthdays)

Person 1 :- can have birthday on 365/365
Person 2 :- can have birthday on 364/365
Person 3 :- can have birthday on 363/365
Person 4 :- can have birthday on 362/365
Person 5 :- can have birthday on 361/365
and so on...

For 3 people P (distinct_birthdays) = (365.364.363)/365^3 = (365!/362!)/365^3
for N people 365!/(365-N)!/365^N
P(shared_birthdays) = 100% - P (distinct_birthdays)
50% = 100% - 365!/(365-N)!/365^N
365!/(365-N)!/365^N = 50%
 N is 23 here for 50%, so what this means is if we have 23 people in the room, atleast 1 person will have 50% probability of sharing the birthday with another person, neat!!!

How to resolve collisions in hastable?
---------------------------------------
Solution 1. Use chaining i.e. in buckets having collision do a linked list of items
Soution 2. Open addressing i.e. try inserting element till you find an emty bucket when collisions happen
eg:- linear probing, double linkedlists etc.


   



