Hash Table is like a subset of values of the universe of possible values,
We would like this to be small this way we could hold it in the main memory.

Goal:- Maintain an evolving set S which belong to the U (universe)

Why not use arrays, they have O(1) lookup too right?, yes, but they maintain the entire universe O(u) space, what if we cannot have all that space avaialble(main memory restrictions), we would like something in the order of O(s)

Why not use lists, they can use space in the order of O(s), however issue is lookup is O(s), sine random access is not v good in lists.

Best of both worlds?(arrays and lists)
------------------------------------
1. Pick n = # of buckets
where n roughly equal to |s|

2. Choose a hash function 
   func hash_function(Key) => spits out (elements from index 0..n-1)

3. Use Array of leangth N, store X in array at A[hash_function[X]]   

4. 
   



