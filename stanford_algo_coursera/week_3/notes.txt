- Given an unsorted array find the ith element from the sorted array.
- Inefficient way do a mergesort- O(N LogN) and choose the ith element
- Can we do better?

Randomized Select
RSelect(array A, length N, order statistic i)

Algorithm:-
1. If N==0 Return A[0]
2. Choose pivot P from A uniformly at random
3. Partition A around P, j is the index of P
4. if j==i return P
5. if j<i RSelect(array A, length j-1, order statistic i)  
6. if j>i RSelect(array A, length N-j, order statistic i-j)

Running Time => Depends on the quality of the Pivot
Worst case if you choose a Pivot which is always the minimum we end up partitioning only 1 element each time a pivot is choosen, giving O(N^ 2)

Best Pivot=> Choosen as the median element => O(N)
What happens if pivot choosen is random?
Goal is to prove that randomy choosen Pivot will also provide a linear solution

RSelect algorithm
------------------
1. Average running time is O(N)
2. Average is not over the data, but the random pivot choices made i.e. no assumption on data ordering or type

RSelect is in phasej if current array size is between 3/4 ^(j+1)*n and 3/4^j*n
Xj number of recursive calls in phase j
Running time of RSelect =  Summation(Xj * c * (3/4)^j*n)
3/4^j*n => upper bound on array size during Phasej

Key => To get a 25-75 split probability is 50%





