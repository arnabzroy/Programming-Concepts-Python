Knapsack can be fractional(object can be cut into fraction) or 0/1
Knapsack 0/1
greedy fails hence use dp..

when to know greedy will fail?
==============================
profit(2,3) or profit(2,w)
weight(1,3) or weight(1,w)

In greedy P/W = (2,1) and we sort.. so greedy always gives answer as "2" which is clearly wrong, since
w can be 1 or 100 or 1000 or 1Million, we should have ideally taken W's value to calculate the worthness.

v Important
===========
- Either take it or leave it
Take the profit if you take the object or ignore profit if you dont take the object and calculate the maximum profit.



wt = [1,3,5,7]
val = [1,4,5,7]
W=7 is the max weight the knaspsack can hold
j => 1 to W values
i => wt[] given along with their values.

if j < wt[i]: # Here the target weight is lesser than the available weight, hence we cannot take the available weight
    T[i][j] = T[i-1][j]
else:
    T[i][j] = max(val[i] + T[i-1][j-wt[i]), T[i-1][j])
    
Here val[i] + T[i-1][j-wt[i]] => We are selecting wt[i] i.e. val[i], hence remaining weight is j-wt[i] which is the jth col
                                 Hence for remaining weight we select T[i-1][j-wt[i] 
    
