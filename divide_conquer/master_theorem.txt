Binary Search
-------------
Recurrance :- T(N) = T(N/2) + O(1)
Complexity :- T(N) = O(logN)

Naive Polynominal
------------------
Recurrance :- T(N) = 4T(N/2) + O(N)
Complexity :- T(N) = O(N^2)

Fast Kasturba Polynominal
-------------------------
Recurrance :- T(N) = 3T(N/2) + O(N)
Complexity :- T(N) = O(N^(log3/log2))

Merge Sort
-----------
Recurrance :- T(N) = 2T(N/2) + O(N)
Complexity :- T(N) = O(NlogN)

         -----------
        |  Generic | 
         -----------
   T(N) = aT(Ceiling(a/b)) + O(n^d)
  
   Here we break the problem into "a" copies  of size "n/b"
   Level "0"
   Problem size at level "0"         => n
   Number of problems at level "0"   => 1
   
   Level "1"
   Problem size at level "1"         => n/b
   Number of problems at level "1"   => a
   
   Level "i"
   Problem size at level "i"         => n/b^i
   Number of problems at level "i"   => a^i
   
   Level "logn/logb"
   Problem size at level "logn/logb" => 1
   Problem size at level "logn/logb" => a^(logn/logb)
   
   T(N) = O(n^d)            if d > log a/log b
   T(N) = O(n^d logn)       if d == log a/log b 
   T(N) = O(n^(loga/logb))  if d < log a/log b
   
  
   
 eg:- T(N) = 4T(N/2) + O(N)
 a = 4
 b = 2
 d = 1
 Since d < (log a/log b) T(N) = O(n^(log4/log2)) = O(n^2)
 
 eg:- T(N) = 3T(N/2) + O(N)
 a = 3
 b = 2
 d = 1
 Since d < (loga/logb) T(N) = O(N^(log3/log2)) = O(N^1.58)
 
 eg:- T(N) = 2T(N/2) + O(N)
 a = 2
 b = 2
 d = 1
 Since d == (loga/logb) T(N) = O(N^1(logN)) = O(NlogN)
 
 eg:- T(N) = T(N/2) + O(1)
 a = 1
 b = 2
 d = 0
 Since d == (loga/logb) i.e. log1/log2 == 0 T(N) = O(N^0 logN) = O(logN)
 
 eg:- T(N) = 2T(N/2) + O(N^2)
 a = 2
 b = 2
 d = 2
 Since d > (loga/logb) 0 T(N) = O(N^d) = O(N^2)
 
 
 
