Divide and Conquer principles
------------------------------
- Divide problem in non-overlapping sub-problems
- Sub-problems are similar and cannot be dis-similar
- One could recursively or iteratively solve the sub problems
- Once above is done combine the results

Binary Search
---------------
- Works only on sorted arrays
- Recurrance relation :- T(n) = T(n/2) + c
- Base case is for empty array T(n) = c
- In general at each level we do "c" work
- It is summation from 0 to logn for "c" which is lg(n)
- Hence time complexity is lg(n)

Recursive:-
------------
BS(A, low, high, key):
    if low < high:
        return low - 1
    mid = low + (high - low)/2 ==> Floor of this since this might not be an integer
    if key == mid:
        return A[mid]
    elif key < mid:
        BS(A, low, mid-1, key)
    else:
        BS(A, mid + 1, high, key)

Iterative:-
------------
BS(A, low, high, key):
    while low <= high:
    mid = low + (high - low)/2 ==> Floor of this since this might not be an integer
    if key == mid:
        return A[mid]
    elif key < mid:
        high = mid-1
    else:
        low = mid + 1
        
        
Multiplying polynomials
-------------------------
- Lot of applications
eg:- A(x) = 3x**2 + 2x + 5
     B(x) = 5x**2 + x + 2
     A(x).B(x) = 15x**4 + 13x**3 + 33x**2 + 9x + 10
        
