https://github.com/python-git/python/blob/master/Lib/heapq.py
http://www.ardendertat.com/2011/05/30/my-favorite-interview-question/
http://interactivepython.org/runestone/static/pythonds/Trees/BinaryHeapImplementation.html

Heap is a almost complete binary tree(all nodes available except the lowest level nodes)
Parent => p Left => 2p Right => 2p + 1
Parent always at floor of p/2
In a heap, for every node x with parent p, the key in p is smaller than or equal to the key in x

Entire binary heap can be represented by a single list since it is a complete binary tree
This is equivalent to **level order filling of a tree..

Why do we need heaps?
---------------------
In a list, inserting O(N) and sorting is O(N log N)
We need these functions to implement a priority queue
Heap can do both of these in O(log N)

How to know if heap property is satisfied?
------------------------------------------
- Parent always greater than children (in max heap)
- Child always at 2i and 2i+1 for left and right sub childs.

Time taken to construct heap?
-----------------------------
O(N)

Add to Heap
----------
- Add to leaf, and swim to top the value by comparison wih parent.

Remove Min/Max i.e. Top from Heap
----------
- Remove Root
- Add some leaf node to root and then sink by comparison with children

Heaps can be represented with arrays
------------------------------------
for every parent "p" the children are at "2p + 1" and "2p + 2"
and for each chil "c" parent is at n-1/2 floor

Maximum height for complete binary tree
-----------------------------------------
max(nodes) = 2 ^(h+1)-1
h           1   2  3  4      
max_node    3   7 15  31
