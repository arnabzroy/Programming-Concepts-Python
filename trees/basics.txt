- Height lg(n)
- BST, left is always smaller than or equal to the right element
- Binary trees have no order
- pre-order root comes first then left and right
- post-order root comes after left and right
- in-order root comes between left and right

Consider below BST, inorder is always sorted data..

        20
  10          30
5   15      25  35

pre-order => 20, 10, 5, 15, 30, 25, 35
post-order => 5, 15, 10, 25, 35, 30, 20
in-order => 5, 10, 15, 20, 25, 30, 35

inorder(Node n):
   if !n:
     return
   inorder(n.left)
   print n.data
   inorder(n.right)
   
postorder(Node n):
   if !n:
     return
   inorder(n.left)
   inorder(n.right)
   print n.data
   
pre-order(Node n):
   if !n:
     return
   print n.data
   inorder(n.left)
   inorder(n.right)   
   
   
 - BFS
   Keep adding to queue node at a particular level
   Once we add the children of a particular node to the queue, dequeue the parent node.
   print when you dequeue, that will be level order traversal.
 
        A
  B          C
D   E      F  G
   
   q = new Queue()
   q.enqueue(node.root)
   while(!q.empty()):
       curr = q.dequeue()
       print curr.data
       if curr.left q.enqueue(curr.left)
       if curr.right q.enqueue(curr.right)
       
   Maximum size of queue is all the leaf nodes present..
   
   Time => O(N)
   Space => 2^h-1 => leaf nodes
   

- Difference between nodes at level 2^h and 2^(h-1)
  At every level we add +n nodes i.e.
  
           A
    B            C
 D     E       F    G
H  I  J  K   L  M  N O => Level 3, here we added 8 nodes and before this in all we had almost 8 nodes, so double the size happened at this level


 
 
 Template
 
 traverse (Node n):
     if !n:
       return n
     nleft = traverse(n.left)
     nright = traverse(n.right)
     result = (nleft, nright, n)
     return result
     
Sum of all nodes
================

Sum (Node n):
     if !n:
       return 0
     nleft = traverse(n.left)
     nright = traverse(n.right)
     result = nleft + nright + n.root
     return result
 
This template follows bottom up approach, i.e. dont process anything till we hit the bottom leaf on left..

   
